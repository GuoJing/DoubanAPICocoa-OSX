{"name":"Doubanapicocoa-osx","tagline":"Douban api for cocoa, Very simple and easy to use. Support OS X Now.","body":"## 概要 ##\r\n\r\nDoubanAPICocoa是一个Cocoa封装的豆瓣API库，非官方版，可以使用于OS X，并支持10.6及之后的版本。[iOS 版本请参考这里](https://github.com/GuoJing/DoubanAPICocoa-iOS)。\r\n\r\nDoubanAPICocoa的底层支持并兼容老版本的[douban-objc-client](https://github.com/lincode/douban-objc-client)，熟悉[douban-objc-client](https://github.com/lincode/douban-objc-client)开发的同学也可以不用更新代码，直接移植到新的库里并且编译通过。但推荐使用DoubanAPICocoa提供的DOUEngine来实现代码。\r\n\r\n注意：示例请自行替换apiKey，并且自行申请相关权限，如豆邮和线上活动以及更多高级的功能。\r\n\r\n### 目的 ###\r\n\r\n1. 使开发更加容易，不用关注网络层的细节\r\n\r\n### 特点 ###\r\n\r\n1. 封装网络层\r\n2. 简单\r\n3. 使用闭包让开发者开发更简单\r\n3. All consts\r\n3. No Warning, No Error and No Build Analyze Errors\r\n\r\n### 样例 ###\r\n\r\n#### 验证 ####\r\n\r\n声明一个engine：\r\n\r\n    engine = [[DOUEngine alloc] initWithApiKey:kAPIKey withSecretKey:kPrivateKey withRedirUrl:kRedirectUrl];\r\n\r\n打开豆瓣验证url：\r\n\r\n    NSString *url_str = [self.engine getConnectUrl];\r\n\r\n从豆瓣返回code并初始化engine：\r\n\r\n    [self.engine didLoadWithCode:code];\r\n\r\n验证通过。\r\n\r\n#### 我是谁 ###\r\n\r\n    [u getWhoAmI:successUserBlock failedBlock:failBlock];\r\n\r\n#### 发广播 ####\r\n    \r\n    DOUBroadcastEngine *s = [self.engine getEngine:kDOUBroadcast];\r\n    [s say:self.shuo_field.title successBlock:successBlock failedBlock:failBlock];\r\n\r\n#### 获取同城活动 ####\r\n\r\n    DOUEventEngine *event_engine = [self.engine getEngine:kDOUEvent];\r\n    [event_engine getEventWithRemoteID:self.eid_field.title successBlock:successBlock failedBlock:failedBlock];\r\n\r\n### 变量 ###\r\n\r\n该库封装了常用的变量，比如发日记如果是发私有的日记，可以直接使用kDOUPrivacyPrivate，同样相册的排序方式可以使用kDOUOrderDesc，无需自己写变量。\r\n\r\n常用的变量文件在库的Engine/Utils里。\r\n\r\n1. DOUAPIConsts.h\r\n2. DOUAPIConsts.h\r\n3. DOUAPIErrorConsts.h\r\n\r\n### 开发 ###\r\n\r\n这个库支持最老的底层的实现方法，也可以非常容易的使用engine进行api开发，可以通过kDOU产品线获得相应的engine，每个engine都有getEngine方法。不过推荐在外面包装一个单例的共享engine，方便在代码各处使用。\r\n\r\n可以删除任意不需要的模块并重新打包和分发，减少代码。\r\n\r\n### 示例 ###\r\n\r\n大部分接口都有基本的示例，今后会提供更多更丰富的示例。\r\n\r\n## 其他 ##\r\n\r\n**[豆瓣API](http://developers.douban.com/)**\r\n\r\n**并且该版本不支持GData等V1版本特性，只支持V2。**\r\n\r\n如果你需要iOS版本，请去:\r\n\r\n1. 开发版：[douban-objc-client](https://github.com/lincode/douban-objc-client)\r\n2. 官方版：[douban-objc-client](https://github.com/douban/douban-objc-client)\r\n\r\n## 信息 ##\r\n\r\n当前版本V0.1.3，主要职责为兼容iOS版本并且封装网络层，今后使用的方法可能会不同。\r\n\r\n当前版本不支持GData等V1版本特性，只支持V2，所以必须使用https。\r\n\r\n当前版本只适用于64位版本，考虑到今后32位的Mac也不多，所以暂时不打算支持。\r\n\r\n## 使用 ##\r\n\r\n### 使用Framework ###\r\n\r\n下载代码之后，可以看到Sample代码里有一个`DoubanAPICocoa.framework`，直接import到自己的包里即可。\r\n\r\n`Xcode` -> `Add files to PROJECT` -> `select the folder`\r\n\r\n你会看到一个小的工具箱，名字为DoubanAPICocoa库已经增加完毕。\r\n\r\n![samplecode](http://guojing.me/images/2012/samplecode.png)\r\n\r\n在项目的`Build Phases`里的`Link Binary with Libraries`增加必要的组件，如`Security.framework`。\r\n\r\n同样在`Build Phases`里，在右下角找到`Add Build Phase`，在下拉列表中选择`Add Build Phase`，一个新的框会出现在这个页面里，打开刚创建的框，里面把刚才添加在文件列表的framework拖动到此处。并在分类选项里选择Framework。\r\n\r\n![sampleconfig](http://guojing.me/images/2012/sampleconfig.png)\r\n\r\n### 直接引用Framework Project ###\r\n\r\n直接拖动DoubanAPICocoa包到项目中。\r\n\r\n打开自己的项目，在项目信息中，选择`TARGET`并在里面设置编译选项，搜寻`Header Search Path`，设置DoubanAPICocoa的路径。\r\n\r\n在项目的`Build Phases`里的`Link Binary with Libraries`增加必要的组件，如`Security.framework`。\r\n\r\n同样在`Build Phases`里，在右下角找到`Add Build Phase`，在下拉列表中选择`Add Build Phase`，一个新的框会出现在这个页面里，打开刚创建的框，把你需要使用的拷贝的项目拖动到此处。\r\n\r\n### 编译 ###\r\n\r\n无论是DoubanAPICocoa.framework还是Sample代码，在编译的时候都没有错误和警告，至少在我的平台下，如果在某些平台下出现问题，请通知我。\r\n\r\n### 错误调试 ###\r\n\r\n如果引用进来出现错误，一般是`image not found`，说明DoubanAPICocoa包引用出错了，可能以下几种方法能帮到你。\r\n\r\n1. 增加文件时候选择 `Copy items into destination group's folder`\r\n2. 可能需要在项目的`Build Phases`里的`Link Binary with Libraries`增加必要的组件，如`Security.framework`。\r\n3. Header Search Path设置出错。\r\n\r\n**TIPS：一般来说，找不到framework的主要原因在于路径设置出错。**\r\n\r\n### 可能需要的包 ###\r\n\r\n* SystemConfiguration.framework\r\n* Security.framework\r\n* libxml2.dylib\r\n* libz.dylib\r\n* Foundation.framework\r\n\r\n## 使用 ##\r\n\r\n和iOS版本的使用方法类似。\r\n\r\n### 提供OAuth2的参数 ###\r\n\r\n\t  DOUService *service = [DOUService sharedInstance];\r\n\t  service.clientId = kAPIKey;\r\n\t  service.clientSecret = kPrivateKey;\r\n\r\n### 发起一个异步请求 ###\r\n\r\n\tNSString *subPath = [NSString stringWithFormat:@\"/v2/event/%d\", event_id];\r\n\t\r\n\tDOUQuery *query = [[[DOUQuery alloc] initWithSubPath:subPath parameters:nil] autorelease];\r\n\r\n\tquery.apiBaseUrlString = service.apiBaseUrlString;\r\n\t\r\n\tDOUHttpRequest *req = [DOUHttpRequest requestWithQuery:query target:self];\r\n\r\n\tDOUService *service = [DOUService sharedInstance];\r\n\t[service addRequest:req];\r\n\r\n### 使用v0.1.1之后的版本 ###\r\n\r\n通过apiKey等获得一个engine。\r\n\r\n    DOUEngine *engine = [[DOUEngine alloc] initWithApiKey:kAPIKey\r\n                                            withSecretKey:kPrivateKey\r\n                                             withRedirUrl:kRedirectUrl];\r\n                                             \r\n通过engine获得event_engine。\r\n\r\n    DOUEventEngine *event_engine = [self.engine getEngine:kDOUEvent];\r\n    \r\n使用闭包进行网络请求。\r\n\r\n    void(^successBlock)(DOUEvent *) = ^(DOUEvent *event) {\r\n        [self updateImageUI:event];\r\n    };\r\n    \r\n使用engine内封装好的方法，把闭包传进去。\r\n\r\n    [event_engine getEventWithRemoteID:self.eid_field.title successBlock:successBlock];\r\n\r\n具体还是请看Sample代码，简单易懂。\r\n\r\n## 示例 ##\r\n\r\nSample是一个简单的客户端，用来演示各种功能。\r\n\r\n可以在菜单栏里打开相应的Sample，Sample并不是同步更新完善。但基本上重要的接口都会有示例。\r\n\r\n示例有：\r\n\r\n1. 豆瓣读书\r\n2. 豆瓣电影\r\n3. 豆瓣音乐\r\n4. 豆瓣同城\r\n5. 豆瓣社区\r\n6. 豆瓣用户\r\n7. 豆瓣相册\r\n8. 豆瓣评论\r\n9. 豆瓣回复\r\n10. 豆瓣广播\r\n11. 豆瓣日记\r\n12. 豆瓣豆邮\r\n13. 线上活动\r\n\r\n## 历史 ##\r\n\r\nv0.1\r\n\r\n1. 移植iOS版本支持MacOS并调整结构。\r\n2. 去掉GData等老版本的支持。\r\n\r\nv0.1.1\r\n\r\n1. 使用封装的DOUEngine开发api，更加简单。\r\n2. 增加一些常用的model。\r\n\r\nv0.1.2\r\n\r\n1. 完善Engine。","google":"42721249","note":"Don't delete this file! It's used internally to help with page regeneration."}